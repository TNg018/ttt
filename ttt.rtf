{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red119\green117\blue165;\red0\green0\blue0;\red178\green48\blue128;
\red212\green34\blue255;\red56\green159\blue157;\red57\green164\blue40;\red209\green113\blue37;\red97\green34\blue255;
\red224\green51\blue34;}
{\*\expandedcolortbl;;\cssrgb\c54197\c53905\c70624;\csgray\c0;\cssrgb\c75800\c28661\c57528;
\cssrgb\c87269\c29650\c100000;\cssrgb\c26122\c67994\c67783;\cssrgb\c26425\c68732\c20500;\cssrgb\c85991\c52029\c18734;\cssrgb\c46228\c27439\c100000;
\cssrgb\c91311\c29126\c17209;}
\margl1440\margr1440\vieww11340\viewh15780\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 include\cf3  \cf4 <iostream>\cf3 \
\cf2 #include\cf3  \cf4 <cstdio>\cf3 \
\cf2 #include\cf3  \cf4 <string>\cf3 \
\cf2 #include\cf3  \cf4 <cstdlib>\cf3 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 using\cf3  \cf5 namespace\cf3  \cf6 std\cf3 ;\
\
\cf5 const\cf3  \cf7 int\cf3  \cf8 BOARD_SIZE\cf3  = 3;\
\
\cf5 class\cf3  \cf7 TTT\cf3  \{\
\cf5 public\cf3 :\
  \cf9 TTT\cf3 ();\
  \cf7 void\cf3  \cf9 playGame\cf3 ();\
\cf5 private\cf3 :\
  \cf10 // Private member functions.                                                                                               \cf3 \
  \cf7 void\cf3  \cf9 printBoard\cf3 ();\
  \cf7 bool\cf3  \cf9 gameOver\cf3 ();\
  \cf7 int\cf3  \cf9 getMove\cf3 (\cf7 string\cf3  \cf8 turn\cf3 );\
  \cf7 void\cf3  \cf9 updateBoard\cf3 (\cf7 int\cf3  \cf8 position\cf3 , \cf7 string\cf3  \cf8 turn\cf3 );\
\
  \cf10 // Private member variable.                                                                                                \cf3 \
  \cf7 string\cf3  \cf8 board\cf3 [BOARD_SIZE][BOARD_SIZE];\
\
\};\
\
\
\cf7 int\cf3  \cf9 main\cf3 ()\
\{\
  \cf7 TTT\cf3  \cf8 game\cf3 ;\
  game.playGame();\
  \cf5 return\cf3  0;\
\}\
\
\
\cf10 // Constructor.                                                                                                              \cf3 \
\cf10 // Initializes the board member variable.                                                                                    \cf3 \
\cf6 TTT\cf3 ::\cf9 TTT\cf3 ()\
\{\
  board[0][0] = \cf4 "0"\cf3 ;\
  board[0][1] = \cf4 "1"\cf3 ;\
  board[0][2] = \cf4 "2"\cf3 ;\
  board[1][0] = \cf4 "3"\cf3 ;\
  board[1][1] = \cf4 "4"\cf3 ;\
  board[1][2] = \cf4 "5"\cf3 ;\
  board[2][0] = \cf4 "6"\cf3 ;\
  board[2][1] = \cf4 "7"\cf3 ;\
  board[2][2] = \cf4 "8"\cf3 ;\
\}\
\
\cf10 /*                                                                                                                           \cf3 \
\cf10  * Runs the game in a loop that continues until the game is over.                                                            \cf3 \
\cf10  */\cf3 \
\cf7 void\cf3  \cf6 TTT\cf3 ::\cf9 playGame\cf3 ()\
\{\
  \cf7 string\cf3  \cf8 turn\cf3  = \cf4 "X"\cf3 ;\
  \cf5 while\cf3 (\cf5 not\cf3  gameOver())\
    \{\
      printBoard();\
      \cf7 int\cf3  \cf8 position\cf3  = getMove(turn);\
      updateBoard(position, turn);\
\
      \cf10 // Below, we switch whose turn it is.                                                                                  \cf3 \
      \cf5 if\cf3  (turn == \cf4 "X"\cf3 )\{\
        turn = \cf4 "O"\cf3 ;\
      \}\
      \cf5 else\cf3  \{\
        turn = \cf4 "X"\cf3 ;\
      \}\
    \}\
\
  \cf10 //  printBoard(); // necessary?                                                                                            \cf3 \
  cout << \cf4 "The game is over!"\cf3  << endl;\
\}\
\
\cf10 /*                                                                                                                           \cf3 \
\cf10  * Checks whether game is over,                                                                                              \cf3 \
\cf10  *  i.e., whether someone has won or the game is a draw.                                                                     \cf3 \
\cf10  * Output: Boolean indicating whether game is over.                                                                          \cf3 \
\cf10  */\cf3 \
\cf7 bool\cf3  \cf6 TTT\cf3 ::\cf9 gameOver\cf3 ()\
\{\
  \cf7 bool\cf3  \cf8 endGame\cf3  = \cf6 false\cf3 ;\
  \cf5 for\cf3  (\cf7 int\cf3  \cf8 row\cf3  = 0; row < BOARD_SIZE; row++) \{\
    \cf5 if\cf3  ((board[row][0] == board[row][1]) \cf5 and\cf3  (board[row][1] == board[row][2])) \{\
      cout << board[row][0] << \cf4 " is the winner! Row win!"\cf3  << endl;\
      \cf5 return\cf3  \cf6 true\cf3 ;\
    \}\
  \}\
  \cf5 for\cf3  (\cf7 int\cf3  \cf8 col\cf3  = 0; col < BOARD_SIZE; col++) \{\
    \cf5 if\cf3  ((board[0][col] == board[1][col]) \cf5 and\cf3  (board[1][col] == board[2][col])) \{\
      cout << board[0][col] << \cf4 " is the winner! Column win!"\cf3  << endl;\
      \cf5 return\cf3  \cf6 true\cf3 ;\
    \}\
  \}\
  \cf5 if\cf3  ((board[2][0] == board[1][1]) \cf5 and\cf3  (board[1][1] == board[0][2])) \{\
    cout << board[2][0] << \cf4 " is the winner! Diagonal win!"\cf3  << endl;\
    \cf5 return\cf3  \cf6 true\cf3 ;\
  \}\
  \cf5 else\cf3  \cf5 if\cf3  ((board[0][0] == board[1][1]) \cf5 and\cf3  (board[1][1] == board[2][2])) \{\
    cout << board[0][0] << \cf4 " is the winner! Diagonal win!"\cf3  << endl;\
    \cf5 return\cf3  \cf6 true\cf3 ;\
  \}\
  \cf5 else\cf3  \cf5 if\cf3  (\
           ((board[0][0] == \cf4 "X"\cf3 ) \cf5 or\cf3  (board[0][0] == \cf4 "O"\cf3 )) \cf5 and\cf3 \
           ((board[0][1] == \cf4 "X"\cf3 ) \cf5 or\cf3  (board[0][1] == \cf4 "O"\cf3 )) \cf5 and\cf3 \
           ((board[0][2] == \cf4 "X"\cf3 ) \cf5 or\cf3  (board[0][2] == \cf4 "O"\cf3 )) \cf5 and\cf3 \
           ((board[1][0] == \cf4 "X"\cf3 ) \cf5 or\cf3  (board[1][0] == \cf4 "O"\cf3 )) \cf5 and\cf3 \
           ((board[1][1] == \cf4 "X"\cf3 ) \cf5 or\cf3  (board[1][1] == \cf4 "O"\cf3 )) \cf5 and\cf3 \
           ((board[1][2] == \cf4 "X"\cf3 ) \cf5 or\cf3  (board[1][2] == \cf4 "O"\cf3 )) \cf5 and\cf3 \
           ((board[2][0] == \cf4 "X"\cf3 ) \cf5 or\cf3  (board[2][0] == \cf4 "O"\cf3 )) \cf5 and\cf3 \
           ((board[2][1] == \cf4 "X"\cf3 ) \cf5 or\cf3  (board[2][1] == \cf4 "O"\cf3 )) \cf5 and\cf3 \
           ((board[2][2] == \cf4 "X"\cf3 ) \cf5 or\cf3  (board[2][2] == \cf4 "O"\cf3 ))\
           ) \{\
    cout << \cf4 "All spaces full. Tie!"\cf3  << endl;\
    \cf5 return\cf3  \cf6 true\cf3 ;\
  \}\
  \cf5 else\cf3  \{\
    \cf5 return\cf3  \cf6 false\cf3 ;\
\}\
  \cf5 return\cf3  endGame;\
\}\
\
\cf10 /*                                                                                                                           \cf3 \
\cf10  * Prompts the user for a move (int 0-9), checks if that is a valid move, and returns the move.                              \cf3 \
\cf10  *                                                                                                                           \cf3 \
\cf10  * A move is invalid if: (1) it is less than 0 or greater than or equal to 9,                                                \cf3 \
\cf10  * or (2) if that position on the board is already taken.                                                                    \cf3 \
\cf10  *                                                                                                                           \cf3 \
\cf10  * Function assumes that user does indeed provide an integer.                                                                \cf3 \
\cf10  *                                                                                                                           \cf3 \
\cf10  * Input: String ("X" or "O") naming whose turn it is.                                                                       \cf3 \
\cf10  * Output: Integer move (0-9) given by user.                                                                                 \cf3 \
\cf10  */\cf3 \
\cf7 int\cf3  \cf6 TTT\cf3 ::\cf9 getMove\cf3 (\cf7 string\cf3  \cf8 turn\cf3 )\
\{\
  \cf7 int\cf3  \cf8 position\cf3 ;\
  cout << turn << \cf4 "'s turn. Please enter a free position on the board: "\cf3  << endl;\
  cin >> position;\
\
  \cf5 do\cf3  \{\
    \cf7 int\cf3  \cf8 row\cf3  = position / 3;\
    \cf7 int\cf3  \cf8 col\cf3  = position % 3;\
    \cf5 if\cf3  ((position < 0) \cf5 or\cf3  (position >= 9)) \{\
      cout << \cf4 "Given position is out of range. Please try again."\cf3  << endl;\
      cin >> position;\
    \}\
    \cf5 else\cf3  \cf5 if\cf3  ((board[row][col] == \cf4 "X"\cf3 ) \cf5 or\cf3  (board[row][col] == \cf4 "O"\cf3 )) \{\
      cout << \cf4 "Position already taken. Please try again."\cf3  << endl;\
      cin >> position;\
    \}\
    \cf5 else\cf3  \{\
      \cf5 return\cf3  position;\
    \}\
  \} \cf5 while\cf3  (\cf6 true\cf3 );\
\}\
\
\cf10 /*                                                                                                                           \cf3 \
\cf10  * Updates board with an X or O (depending on turn) in given position.                                                       \cf3 \
\cf10  * Inputs: Position as integer, string turn (X or O).                                                                        \cf3 \
\cf10  */\cf3 \
\cf7 void\cf3  \cf6 TTT\cf3 ::\cf9 updateBoard\cf3 (\cf7 int\cf3  \cf8 position\cf3 , \cf7 string\cf3  \cf8 turn\cf3 )\
\{\
  \cf5 for\cf3  (\cf7 int\cf3  \cf8 row\cf3  = 0; row < BOARD_SIZE; row++) \{\
    \cf5 for\cf3  (\cf7 int\cf3  \cf8 col\cf3  = 0; col < BOARD_SIZE; col++) \{\
      \cf5 if\cf3  ((row == (position / 3)) \cf5 and\cf3  (col == (position % 3))) \{\
        board[row][col] = turn;\
      \}\
    \}\
  \}\
\}\
\
\cf10 /*                                                                                                                           \cf3 \
\cf10  * Prints tic tac toe board.                                                                                                 \cf3 \
\cf10  */\cf3 \
\cf7 void\cf3  \cf6 TTT\cf3 ::\cf9 printBoard\cf3 ()\
\{\
  cout << \cf4 "Welcome to Tic Tac Toe!"\cf3  << endl;\
  cout << \cf4 "                       "\cf3  << endl;\
  cout << \cf4 "        |     |        "\cf3  << endl;\
  cout << \cf4 "     "\cf3  << board[0][0] << \cf4 "  |  "\cf3  << board[0][1] << \cf4 "  |  "\cf3  << board[0][2] << endl;\
  cout << \cf4 "   _____|_____|_____   "\cf3  << endl;\
  cout << \cf4 "        |     |        "\cf3  << endl;\
  cout << \cf4 "     "\cf3  << board[1][0] << \cf4 "  |  "\cf3  << board[1][1] << \cf4 "  |  "\cf3  << board[1][2] << endl;\
  cout << \cf4 "   _____|_____|_____   "\cf3  << endl;\
  cout << \cf4 "        |     |        "\cf3  << endl;\
  cout << \cf4 "     "\cf3  << board[2][0] << \cf4 "  |  "\cf3  << board[2][1] << \cf4 "  |  "\cf3  << board[2][2] << endl;\
  cout << \cf4 "                       "\cf3  << endl;\
\}\
\
}